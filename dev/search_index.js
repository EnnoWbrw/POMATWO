var documenterSearchIndex = {"docs":
[{"location":"Model_config/#Defining-the-Setup","page":"Model Creation","title":"Defining the Setup","text":"","category":"section"},{"location":"Model_config/#Model-Setup","page":"Model Creation","title":"Model Setup","text":"","category":"section"},{"location":"Model_config/","page":"Model Creation","title":"Model Creation","text":"ModelSetup","category":"page"},{"location":"Model_config/#POMATWO.ModelSetup","page":"Model Creation","title":"POMATWO.ModelSetup","text":"ModelSetup{T<:MarketType}\n\nA container struct that holds the basic configuration for the market simulation model.\n\nFields\n\nScenario::String: A descriptive name or identifier for the model scenario.\nTimeHorizon::TimeHorizon: Time settings for the simulation (see section on 'TimeHorizon').\nMarketType::T: Type of market structure to simulate (see section 'MarketType'). Defaults to ZonalMarket().\nProsumerSetup::ProsumerSetup: Configuration of prosumer behavior in the model (see section 'ProsumerSetup'). Defaults to NoProsumer().\n\nThis struct supports keyword-based construction using default values where provided.\n\nExample\n\nModelSetup(\n    \"TestSetup\",\n    TimeHorizon(; offset = 0, split = 24, stop = 48),\n    NodalMarketWithRedispatch(target_zone = \"DE\"),\n    NoProsumer(),\n)\n\n\n\n\n\n","category":"type"},{"location":"Model_config/","page":"Model Creation","title":"Model Creation","text":"TimeHorizon","category":"page"},{"location":"Model_config/#POMATWO.TimeHorizon","page":"Model Creation","title":"POMATWO.TimeHorizon","text":"TimeHorizon(; start=1, stop=8760, split=24, offset=0)\n\nStructure for defining a time horizon used in simulations or data analysis.\n\nFields\n\nstart::Int: The starting timestep (hour) of the time horizon (default: 1).\nstop::Int: The ending timestep (hour) of the time horizon (default: 8760).\nsplit::Int: The length (hours) of each subinterval or chunk (default: 24).\noffset::Int: An offset (in timesteps or hours) applied to the time horizon (default: 0). This allows subintervals that start at specific hours of the day. \n\nExample\n\nIn this setup a time period of one year is used for market simulation. The optimizeation is cut into 365 subintervals,  that start at hour 12 of each day.\n\nsetup = ModelSetup(\n    \"TestSetup\",\n    TimeHorizon(start = 1, stop = 8760, split = 24, offset = 12),\n    ZonalMarketWithRedispatch(target_zone = \"DE\"),\n    NoProsumer(),\n)\n\n\n\n\n\n","category":"type"},{"location":"Model_config/#Model-Run","page":"Model Creation","title":"Model Run","text":"","category":"section"},{"location":"Model_config/","page":"Model Creation","title":"Model Creation","text":"ModelRun","category":"page"},{"location":"Model_config/#POMATWO.ModelRun","page":"Model Creation","title":"POMATWO.ModelRun","text":"ModelRun{MT<:MarketType}(params::Parameters, setup::ModelSetup{MT}, solver; \n                         resultdir=\"results\", scenarioname=randstring(6), overwrite=false)\n\nEncapsulates a single simulation run of a market model, including its setup, solver, and output configuration.\n\nArguments\n\nparams::Parameters: Input parameters for model creation (see section 'Parameters').\nsetup::ModelSetup{MT}: Struct containing the scenario description, time horizon, market type, and prosumer setup (see section ModelSetup).\nsolver: Optimization solver used in the simulation.\n\nKeyword Arguments\n\nresultdir::String = \"results\": Base directory where results will be stored.\nscenarioname::String = randstring(6): Unique identifier for the scenario; used to create a subdirectory.\noverwrite::Bool = false: Whether to overwrite existing result directories.\n\nFields\n\nparams: See above.\nsetup: See above.\nsolver: See above.\nresultdir: Base directory path for storing results.\nscenarioname: Name/identifier for this specific scenario run.\nscen_dir: Full path to the scenario-specific result directory (joinpath(resultdir, scenarioname)).\noverwrite: Whether existing directories can be overwritten.\n\nBehavior\n\nAutomatically creates a result directory for the run.\nThrows an error if the scenario directory exists and overwrite=false.\n\n\n\n\n\n","category":"type"},{"location":"Model_config/#Calling-the-optimizer","page":"Model Creation","title":"Calling the optimizer","text":"","category":"section"},{"location":"Model_config/","page":"Model Creation","title":"Model Creation","text":"POMATWO.run(mr::ModelRun)","category":"page"},{"location":"Model_config/#POMATWO.run-Tuple{ModelRun}","page":"Model Creation","title":"POMATWO.run","text":"run(mr::ModelRun)\n\nExecutes the configured POMATWO model simulation for the given ModelRun object.\n\nThis function performs the following:\n\nSaves the input parameters object to the results folder for traceability.\nExecutes the internal optimization and simulation routine.\n\nArguments\n\nmr::ModelRun: The simulation object that contains the model configuration (ModelSetup) and preloaded input data (Parameters).\n\nSide Effects\n\nWrites params.jld2 to the scenario output directory specified in mr.scen_dir.\nStores simulation results within the ModelRun instance and in associated output files.\n\nExample\n\ndata_files= Dict{Symbol,String}(\n    :plants => joinpath(datapath, \"plants.csv\"),\n    :nodes => joinpath(datapath, \"nodes.csv\"),\n    :zones => joinpath(datapath, \"zones.csv\"),\n    :lines => joinpath(datapath, \"lines.csv\"),\n    :dclines => joinpath(datapath, \"dclines.csv\"),\n    :demand => joinpath(datapath, \"nodal_load.csv\"),\n    :types => joinpath(datapath, \"planttypes.csv\"),\n)\nsetup = ModelSetup(\n    \"TestSetup\",\n    TimeHorizon(stop = 4),\n    ZonalMarketWithRedispatch(),\n    NoProsumer()\n    )\nparams = load_data(data_files)\nmr = ModelRun(setup, params, solver)\n\nrun(mr)  # executes the market simulation\n\n\n\n\n\n","category":"method"},{"location":"Model_config/#Optimizer-Attributes","page":"Model Creation","title":"Optimizer Attributes","text":"","category":"section"},{"location":"Model_config/","page":"Model Creation","title":"Model Creation","text":"Optimizer attributes can be set by using the JuMP.optimizer_with_attributes function from the JuMP.jlpackage. This function is re-exported from JuMP.jl","category":"page"},{"location":"Model_config/","page":"Model Creation","title":"Model Creation","text":"note: Note\nYou can use optimizer_with_attributes directly after importing this package, as it is re-exported for your convenience.","category":"page"},{"location":"Model_config/","page":"Model Creation","title":"Model Creation","text":"Additionally MathOptInterface is imported as MOI","category":"page"},{"location":"power_flow_ac/#3.-AC-Power-Flow-Linearization","page":"AC Power Flow","title":"3. AC Power Flow Linearization","text":"","category":"section"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"The apparent power flow from one node to another can be divided into active and reactive power:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"beginaligned\n    P_nm = lvert underlineU_n^2 rvert cdot g_nm - lvert U_n rvert cdot lvert U_m rvert cdot g_nm cdot costheta_nm - lvert U_n rvert cdot lvert U_m rvert cdot b_nm sintheta_nm\n    Q_nm = - lvert underlineU_n^2 rvert cdot b_nm + lvert U_n rvert cdot lvert U_m rvert cdot b_nm cdot costheta_nm - lvert U_n rvert cdot lvert U_m rvert cdot g_nm sintheta_nm\nendaligned","category":"page"},{"location":"power_flow_ac/#DC-Power-Flow-Assumptions","page":"AC Power Flow","title":"DC Power Flow Assumptions","text":"","category":"section"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"For the linearization of power flows in the AC network, the reactive power component Q is neglected, the reasoning behind this is given below. The following three assumptions are necessary:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"g = 0 and b = frac-1X\ncos(theta_nm) = 1 and sin(theta_nm) = theta_nm\nU_n = U_m = 1 (per-unit system)","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"Assumption 1 is based on the observation that the ohmic resistance R in the transmission network is significantly smaller than the reactance X. Recall that for the impedance underlineZ:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"underlineZ = R + jX","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"By rearranging the equations:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"underlineY = frac1underlineZ = frac1R + jX = g + jb","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"we obtain:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"g = fracRR^2+X^2qquad b = frac-XR^2+X^2","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"When R ll X, these terms simplify to: g = 0 and b = frac-1x_nm.","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"Thus, the equations simplify to:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"beginaligned\n    P_nm = - b_nm cdot U_n cdot U_m  sin(theta_nm) \n    = frac1x_nm cdot U_n cdot U_m  sin(theta_nm) \n    Q_nm = - b_nm cdot underlineU_n^2 +  b_nm cdot U_n cdot U_m cdot cos(theta_nm) \n    = frac1x_nm cdot underlineU_n^2 -  frac1x_nm cdot U_n cdot U_m cdot cos(theta_nm)\nendaligned","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"Assumption 2 is based on the observation that the phase angle difference theta_nm is very small. The cosine of theta converges to 1 as thetaapproaches 0. The small-angle approximation states that sin(theta) approx thetafor very small theta (in radians).","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"With the small-angle approximation, the above equations further simplify to:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"beginaligned\n    P_nm = frac1x_nm cdot U_n cdot U_m cdot  theta_nm \n    Q_nm = frac1x_nm cdot underlineU_n^2 -  frac1x_nm cdot U_n cdot U_m\nendaligned","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"Assumption 3 implies that the node voltages rarely deviate from their design values and only by a small amount. In the per-unit system, the magnitudes of the node voltages are therefore very close to 1.","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"By substituting Assumption 3 into the previous equations, the linearized equations for power transmission are obtained:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"beginaligned\n    P_nm = frac1x_nm cdot theta_nm \n    Q_nm = frac1x_nm -  frac1x_nm = 0\nendaligned","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"For the active nodal power:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"P_n = sum_m^Nfrac1x_nmcdot theta_nm","category":"page"},{"location":"power_flow_ac/#Model-Integration","page":"AC Power Flow","title":"Model Integration","text":"","category":"section"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"With the active power flow P_nm from node n to node m and the net power input at node n called P_n. In this formulation the line parameter x_nm representing the line reactance is static, i.e. not time dependent. This is often done in power system modeling. The whole power flow problem depicted in Equations (see formulas below) is dependent on the variable theta_nm, which represents the phase angle difference between two connected nodes. The equations can be transformed to represent actual power flows on line l and nodal net power injections into node n by using two matrices that capture grid topology and line parameters. Additionally, line limitations can be considered by adding equation for f_l^max.","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"F_l = sum_n^N textB_ltimes n^line cdot theta_n qquad forall l in L \nINJ_n = sum_m^N textB_n times m^bus cdot theta_m qquad forall n in N \nINJ_n = sum_l^L textA_ltimes n cdot F_l qquad forall n in N \n-f_l^max leq F_l leq f_l^max qquad forall l in L \ntheta_n=slack = 0","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"Implementing a reference node, often referred to as a \"slack node\", with a fixed nodal phase angle of theta_n=slack = 0 allows a simplification of the phase angle difference theta_nm to the nodal phase angle difference theta_n. The nodal phase angles are all in reference to the one common slack node. The entire load flow problem then only contains one decision variable for each node, which significantly decreases model complexity.","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"The slack node can be chosen at random within the connected system.","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"The line susceptance matrix textB_ltimes n^line is an l times n matrix, that can be created from a diagonalized vector of line susceptances textB_ll^d multiplied by the incidence matrix textA_ltimes n.","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"The bus susceptance matrix textB_n times m^bus can be created by multiplying the transposed line susceptance matrix with the incidence matrix.","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"textB_ltimes n^line = textB_ll^d cdot textA_ltimes n \ntextB_n times m^bus = textA_ltimes n^T cdot textB_ll^d cdot textA_ltimes n \n= (textB_ltimes n^line)^T cdot textA_ltimes n","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"In the incidence matrix textA_ltimes n the row of line l contains the value +1 at the column of node n if the line starts at node n and the value -1 if the line ends in node n, all other values are zero.","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"The diagonal elements of the textB_n times m^bus matrix contain the sum of all line susceptances of adjacent lines at node n. If there is a line from node n to node m, non-diagonal elements contain the value of the negative line susceptances, or zero if no connection exists.","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"Example for a simple three-node network:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"textB_ll^d = nobreak\nbeginbmatrix\n b_l_1  0 \n 0  b_l_2\nendbmatrix\ntextA_ltimes n = nobreak\nbeginbmatrix\n1  -1  0 \n0  1  -1  \nendbmatrix\ntextB_ltimes n^line = nobreak\nbeginbmatrix\nb_l_1  -b_l_1  0 \n0  b_l_2  -b_l_2\nendbmatrix\ntextB_n times m^bus = nobreak\nbeginbmatrix\nb_l_1  -b_l_1  0 \n-b_l_1  b_l_1 + b_l_2  -b_l_2\n0  -b_l_2  b_l_2\nendbmatrix","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"The line directions in the incidence matrix may be chosen arbitrarily for this application, the direction only defines the sign of the power flow value.","category":"page"},{"location":"power_flow_ac/#PTDF-Matrix-Formulation","page":"AC Power Flow","title":"PTDF-Matrix Formulation","text":"","category":"section"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"Removing the column and row corresponding to the slack node in the textB_n times m^bus matrix, the inverted matrix (textB_n times m^bus)^-1 may be used to solve for theta to arrive at an alternative model formulation based on the power transfer distribution factor (PTDF) matrix. To ensure the Kirchhoff Current Law is still satisfied after the removal of the reference node, the following equation is added:","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"PTDF_ltimes n = textB_ltimes n^line cdot (textB_n times m^bus)^-1 \nF_l = sum_n PTDF_ltimes n cdot INJ_n qquad forall l in L \nsum_n INJ_n = 0","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"References:  ","category":"page"},{"location":"power_flow_ac/","page":"AC Power Flow","title":"AC Power Flow","text":"Van den Bergh, Delarue (2014)\nMonticelli (1999)  \nEgerer (2016)\nWeinhold, Mieth (2021)","category":"page"},{"location":"Visualizing_inputs/#Visualizing-Input-Data","page":"Visualizing inputs","title":"Visualizing Input Data","text":"","category":"section"},{"location":"Visualizing_inputs/#Interactive-Plots","page":"Visualizing inputs","title":"Interactive Plots","text":"","category":"section"},{"location":"Visualizing_inputs/#Static-Plots","page":"Visualizing inputs","title":"Static Plots","text":"","category":"section"},{"location":"Visualizing_inputs/#plot_network(data::Dict{Symbol,String})","page":"Visualizing inputs","title":"plot_network(data::Dict{Symbol,String})","text":"","category":"section"},{"location":"Visualizing_inputs/","page":"Visualizing inputs","title":"Visualizing inputs","text":"Plots a simple network map of an energy system using line and node geographical data. AC and DC transmission lines are shown as straight connections between nodes, and all network nodes are marked.","category":"page"},{"location":"Visualizing_inputs/","page":"Visualizing inputs","title":"Visualizing inputs","text":"Arguments","category":"page"},{"location":"Visualizing_inputs/","page":"Visualizing inputs","title":"Visualizing inputs","text":"data: A dictionary containing file paths for required network data tables (see section Input Data Load)","category":"page"},{"location":"Visualizing_inputs/","page":"Visualizing inputs","title":"Visualizing inputs","text":"Plot Details","category":"page"},{"location":"Visualizing_inputs/","page":"Visualizing inputs","title":"Visualizing inputs","text":"AC lines are drawn as solid black lines.\nDC lines are drawn as dashed black lines.\nNodes are plotted as black points.","category":"page"},{"location":"Visualizing_inputs/","page":"Visualizing inputs","title":"Visualizing inputs","text":"Returns","category":"page"},{"location":"Visualizing_inputs/","page":"Visualizing inputs","title":"Visualizing inputs","text":"fig: The Makie figure object containing the network plot.","category":"page"},{"location":"Visualizing_inputs/","page":"Visualizing inputs","title":"Visualizing inputs","text":"Example","category":"page"},{"location":"Visualizing_inputs/","page":"Visualizing inputs","title":"Visualizing inputs","text":"datafiles = Dict{Symbol,String}(\n    :plants => joinpath(datapath, \"plants.csv\"),\n    :nodes => joinpath(datapath, \"nodes.csv\"),\n    :zones => joinpath(datapath, \"zones.csv\"),\n    :lines => joinpath(datapath, \"lines.csv\"),\n    :dclines => joinpath(datapath, \"dclines.csv\"),\n    :demand => joinpath(datapath, \"nodal_load.csv\"),\n    :types => joinpath(datapath, \"planttypes.csv\"),\n)\n\nusing GLMakie, ColorSchemes, Tyler\n\nfig = plot_network(datafiles)","category":"page"},{"location":"Visualizing_outputs/#Visualizing-Output-Data","page":"Visualizing outputs","title":"Visualizing Output Data","text":"","category":"section"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"POMATWO supports different visualizations to analyze the model results. ","category":"page"},{"location":"Visualizing_outputs/#Interactive-Plots","page":"Visualizing outputs","title":"Interactive Plots","text":"","category":"section"},{"location":"Visualizing_outputs/#plot_market_interactive(results;-time_horizonnothing,-scalefactor1/1000,-kind:DA)","page":"Visualizing outputs","title":"plot_market_interactive(results; time_horizon=nothing, scalefactor=1/1000, kind=:DA)","text":"","category":"section"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Creates an interactive plot for visualizing market results by zone, including generation dispatch, load, and price curves.","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Arguments","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"results: A data structure containing DA market simulation results (typically a DataFiles struct).\ntime_horizon: (optional, keyword) A range of time steps (hours) to plot. If not provided, uses the entire time range in results.GEN.\nscalefactor: (optional, keyword, default: 1/1000) A scaling factor for power values (e.g., from MW to GW).\nkind: (optional, keyword, default: :DA) Specify what market stage should be visualized. Currently supported are :DA for Day-Ahead and :REDISP for Redispatch.","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Interactivity","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Dropdown menu to select market zone.\nPlot updates automatically to show:\nGeneration dispatch (per technology)\nLoad curve\nDay-ahead price curve\nDual y-axes for power (GW) and price (EUR/MWh).","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Returns","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"fig: An interactive plot figure (Makie.Figure) for display or saving.","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Example","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"fig = plot_market_interactive(results)","category":"page"},{"location":"Visualizing_outputs/#plot_DA_w_Redisp_interactive(results;-time_horizon-nothing,-scalefactor-1/1000)","page":"Visualizing outputs","title":"plot_DA_w_Redisp_interactive(results; time_horizon = nothing, scalefactor = 1/1000)","text":"","category":"section"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Creates an interactive, comparative visualization of Day-Ahead (DA) and Redispatch market results by zone, showing generation, load, and prices before and after redispatch. This function enables side-by-side analysis of how redispatch alters zonal dispatch and market prices.","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Arguments","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"results: Data structure containing Day-Ahead and redispatch simulation results (typically a DataFiles struct).\ntime_horizon: (optional, keyword) Range of time steps (hours) to plot. Defaults to the full time range in results.GEN.\nscalefactor: (optional, keyword, default: 1/1000) Factor to scale power values (e.g., MW to GW).","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Interactivity","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Dropdown menu to select the market zone.\nThe plot consists of two subplots:\nTop subplot: Generation, load, and prices after redispatch (reflecting resolved network constraints).\nBottom subplot: Generation, load, and prices in the Day-Ahead market (as originally scheduled).\nDual y-axes for both power (GW) and price (EUR/MWh).\nPlots update interactively when the selected zone changes.","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Returns","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"fig: The interactive plot (Makie.Figure) ready for display or saving.","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Example","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"using GLMakie, Tyler, ColorSchemes\nfig = plot_DA_w_Redisp_interactive(results)","category":"page"},{"location":"Visualizing_outputs/#plot_total_gen_interactive(results::DataFiles)","page":"Visualizing outputs","title":"plot_total_gen_interactive(results::DataFiles)","text":"","category":"section"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Create an interactive bar plot of total generation by category for a selected kind and zone.","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"This function displays an interactive Makie figure with two dropdown menus: one for selecting the generation kind (e.g., day-ahead, redispatch, etc.) and one for selecting the zone. The bar plot updates automatically to reflect the selected kind and zone, showing total generation per category in GWh with category-specific colors.","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Arguments","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"results: The results data structure containing generation data, available kinds, zones, and category colors.","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Returns","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Figure: A Makie Figure object with the interactive bar plot and dropdown menus.","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"Example","category":"page"},{"location":"Visualizing_outputs/","page":"Visualizing outputs","title":"Visualizing outputs","text":"using GLMakie, Tyler, ColorSchemes\nfig = plot_total_gen_interactive(results)","category":"page"},{"location":"Visualizing_outputs/#Static-Plots","page":"Visualizing outputs","title":"Static Plots","text":"","category":"section"},{"location":"market_definitions/#Market-Types","page":"Market Definition","title":"Market Types","text":"","category":"section"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"POMATWO supports different market types, that are defined as subtypes of the MarketType. Defining the type of market that is to be simulated is key for the model creation. ","category":"page"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"MarketType","category":"page"},{"location":"market_definitions/#POMATWO.MarketType","page":"Market Definition","title":"POMATWO.MarketType","text":"MarketType\n\nAbstract supertype for market setup descriptors. Subtypes specify the market structure (zonal or nodal) and whether redispatch is considered.\n\nSubtypes\n\nZonalMarket: Simple zonal market without redispatch.\nZonalMarketWithRedispatch: Zonal market including redispatch actions.\nNodalMarket: Nodal market without redispatch.\nNodalMarketWithRedispatch: Nodal market including redispatch actions.\n\nThese types are used to parameterize simulations or models, allowing code to dispatch on market design and redispatch handling.\n\n\n\n\n\n","category":"type"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"In the following, a brief description of supported market types is given. ","category":"page"},{"location":"market_definitions/#Zonal-Markets","page":"Market Definition","title":"Zonal Markets","text":"","category":"section"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"ZonalMarket","category":"page"},{"location":"market_definitions/#POMATWO.ZonalMarket","page":"Market Definition","title":"POMATWO.ZonalMarket","text":"ZonalMarket(; target_zone=nothing)\n\nRepresents a standard zonal market model without redispatch. In zonal market models the energy balance is defined at zonal level.  Optionally, a specific target zone or set of zones can be specified, altough this currently has no effect on model creation.\n\n\n\n\n\n","category":"type"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"ZonalMarketWithRedispatch","category":"page"},{"location":"market_definitions/#POMATWO.ZonalMarketWithRedispatch","page":"Market Definition","title":"POMATWO.ZonalMarketWithRedispatch","text":"ZonalMarketWithRedispatch(; target_zone = nothing)\n\nRepresents a zonal market model with redispatch enabled. This market type is defined by a clearing of zonal markets, followed by a calculation of resulting network flows and redispatch. Optionally, a specific target zone or set of zones can be specified, altough this currently has no effect on model creation.\n\n\n\n\n\n","category":"type"},{"location":"market_definitions/#Nodal-Markets","page":"Market Definition","title":"Nodal Markets","text":"","category":"section"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"NodalMarket","category":"page"},{"location":"market_definitions/#POMATWO.NodalMarket","page":"Market Definition","title":"POMATWO.NodalMarket","text":"NodalMarket\n\nRepresents a nodal market model without redispatch. In nodal markets the energy balance is created at nodal level and markets are cleared subject to network constraints.\n\n\n\n\n\n","category":"type"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"NodalMarketWithRedispatch","category":"page"},{"location":"market_definitions/#POMATWO.NodalMarketWithRedispatch","page":"Market Definition","title":"POMATWO.NodalMarketWithRedispatch","text":"NodalMarketWithRedispatch(; target_zone=nothing)\n\nRepresents a nodal market model with redispatch enabled. This market type is defined by a clearing of nodal markets, followed by a calculation of resulting network flows and redispatch. Optionally, a specific target zone or set of zones can be specified, altough this currently has no effect on model creation.\n\n\n\n\n\n","category":"type"},{"location":"market_definitions/#Prosumer-Setup","page":"Market Definition","title":"Prosumer Setup","text":"","category":"section"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"Due to the development of increasingly high generation capacities of solar photovoltaiks, owned by private consumers, POMATWO includes the option to include so called \"Prosumers\" in the market simulation. Prosumers have their own optimization problem i.e. and, depending on the pricing scheme, they can react to wholesale price signals, or flat electricity prices. ","category":"page"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"ProsumerSetup","category":"page"},{"location":"market_definitions/#POMATWO.ProsumerSetup","page":"Market Definition","title":"POMATWO.ProsumerSetup","text":"ProsumerSetup\n\nAbstract supertype for prosumer market participation models. Subtypes specify whether and how prosumers are represented in the simulation.\n\nSubtypes\n\nNoProsumer: No prosumers are modeled.\nProsumerOptimization: Prosumers are modeled with explicit optimization (variable sell/buy prices and retail tariff types).\n\n\n\n\n\n","category":"type"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"NoProsumer","category":"page"},{"location":"market_definitions/#POMATWO.NoProsumer","page":"Market Definition","title":"POMATWO.NoProsumer","text":"NoProsumer\n\nRepresents a market setup with no prosumer participation.\n\n\n\n\n\n","category":"type"},{"location":"market_definitions/","page":"Market Definition","title":"Market Definition","text":"ProsumerOptimization","category":"page"},{"location":"market_definitions/#POMATWO.ProsumerOptimization","page":"Market Definition","title":"POMATWO.ProsumerOptimization","text":"ProsumerOptimization(; sell_price, buy_price=0, retail_type=:buy_price)\n\nRepresents a prosumer setup where prosumer actions are explicitly optimized with respect to market conditions.\n\nKeyword Arguments\n\nsell_price::Float64: Price at which the prosumer can sell electricity to the market or grid.\nbuy_price::Float64: Price at which the prosumer buys electricity from the market/grid. Defaults to 0.\nretail_type::Symbol: Retail tariff structure. Must be one of :buy_price, :flat, or :realtime. Default is :buy_price.\n\nAn error is thrown if retail_type is not valid.\n\nExample\n\nProsumerOptimization(sell_price=0.12, buy_price=0.22)\n\n\n\n\n\n","category":"type"},{"location":"nomenclature/#1.-Nomenclature","page":"Nomenclature","title":"1. Nomenclature","text":"","category":"section"},{"location":"nomenclature/","page":"Nomenclature","title":"Nomenclature","text":"This section defines all sets, parameters, and variables used in the market and redispatch model.","category":"page"},{"location":"nomenclature/#Sets","page":"Nomenclature","title":"Sets","text":"","category":"section"},{"location":"nomenclature/","page":"Nomenclature","title":"Nomenclature","text":"Symbol Description Unit\nmathbfACL Set of AC lines -\nmathbfDCL Set of DC lines -\nmathbfN Set of nodes -\nmathbfP Set of power plants (including renewables) -\nmathbfS Set of storage units -\nmathbfT Set of time periods -\nmathbfZ Set of market zones -","category":"page"},{"location":"nomenclature/#Parameters","page":"Nomenclature","title":"Parameters","text":"","category":"section"},{"location":"nomenclature/","page":"Nomenclature","title":"Nomenclature","text":"Symbol Description Unit\nmathbfavail_pt Availability of generating unit p at time t -\nmathbfcap_acl^max Maximum capacity of AC line acl MW\nmathbfcap_dcl^max Maximum capacity of DC line dcl MW\nmathbfcap_s^max Maximum storage capacity of unit s MWh\nmathbfc^curt Curtailment cost mathrmEURmathrmMWh\nmathbfc_pt^mc Marginal cost of generating unit p at time t mathrmEURmathrmMWh\nmathbfcharge_st Charging of storage unit s at time t (input, redispatch) MW\nmathbfcu_pt Curtailment of unit p at time t (input, redispatch) MWh\nmathbfgen_p^max Maximum generation capacity of unit p MW\nmathbfgen_pt Generation of unit p at time t (input, redispatch) MW\nmathbfgen_s^max Maximum generation capacity of storage unit s MW\nmathbfinflow_st Inflow into storage unit s at time t MW\nmathbfload_nt Load at node n at time t MWh\nmathbfntc_zzz Nominal transmission capacity between zones z and zz MW\nmathbfA^dc_ltimes n Incidence matrix of DC lines -\nmathbfB^line_acl times n Line susceptance matrix -\nmathbfB^bus_n times m Bus susceptance matrix -\nmathbfeta_s Efficiency of storage unit s -","category":"page"},{"location":"nomenclature/#Variables","page":"Nomenclature","title":"Variables","text":"","category":"section"},{"location":"nomenclature/","page":"Nomenclature","title":"Nomenclature","text":"Symbol Description Unit\nmathbfCHARGE_st Charging of storage unit s at time t MW\nmathbfCHARGE_st^down Charging decrease of storage unit s at time t after redispatch MW\nmathbfCHARGE_st^redisp Charging of storage unit s at time t after redispatch MW\nmathbfCHARGE_st^up Charging increase of storage unit s at time t after redispatch MW\nmathbfCU_pt^redisp Curtailment of generating unit p at time t after redispatch MWh\nmathbfCU_zt Curtailment at zone z at time t MWh\nmathbfEX_zt^net Net exchange at zone z at time t MWh\nmathbfEX_zzzt Exchange from zone zz to zone z at time t MWh\nmathbfF_dclt DC line flow at time t MW\nmathbfF_dclt^neg DC line flow in negative direction at time t MW\nmathbfF_dclt^pos DC line flow in positive direction at time t MW\nmathbfGEN_pt Generation of unit p at time t MW\nmathbfGEN_pt^redisp Generation of unit p at time t after redispatch MW\nmathbfINJ_nt Injection at node n at time t MW\nmathbfRAMP_pt^down Ramping down of generating unit p at time t MW\nmathbfRAMP_pt^up Ramping up of generating unit p at time t MW\nmathbfS_st^lvl Storage level of storage unit s at time t MWh\nmathbfS_st^lvlredisp State of charge of storage unit s after redispatch at time t MWh\nmathbftheta_n Voltage phase angle at node n -","category":"page"},{"location":"nomenclature/","page":"Nomenclature","title":"Nomenclature","text":"See market_model.md for the utilization of the Sets, Parameters and Variables.","category":"page"},{"location":"market_model/#2.-Market-Model","page":"Market Model","title":"2. Market Model","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"The power market model can operate in two phases:","category":"page"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"Zonal/Nodal Market Clearing — day-ahead dispatch based on perfect competition.\nRedispatch — adjustments to initial dispatch for network feasibility.","category":"page"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"","category":"page"},{"location":"market_model/#Market-Clearing-Phase","page":"Market Model","title":"Market Clearing Phase","text":"","category":"section"},{"location":"market_model/#Objective-Function","page":"Market Model","title":"Objective Function","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"min quad\nsum_t^T sum_p^P c_pt^mc cdot GEN_pt\n+ c^curt cdot sum_t^T sum_z^Z CU_zt\n+ sum_t^T sum_s^S mc_st cdot GEN_st","category":"page"},{"location":"market_model/#Market-Balance","page":"Market Model","title":"Market Balance","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"Depending on the chosen setup, the market balance will either be zonal, or nodal. In Europe, market balances are created in a zonal level, with some countries having multiple market zones. An example of nodal pricing can be found in the electricity market of the USA.","category":"page"},{"location":"market_model/#Zonal-Market-Balance","page":"Market Model","title":"Zonal Market Balance","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"beginaligned\n sum_p in z^P GEN_pt\n+ sum_s in z^S (GEN_st - CHARGE_st)\n+ EX_zt^net\n- CU_zt \n= sum_n in z^N load_nt\n- LL_zt qquad forall  z in Z t in T\nendaligned","category":"page"},{"location":"market_model/#Nodal-Market-Balance","page":"Market Model","title":"Nodal Market Balance","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"beginaligned\n sum_u  in  n^U GEN_ut +\n    sum_s  in  n^S (GEN_st -CHARGE_st)\n    + INJ_nt - CU_nt = load_nt - LL_nt  forall  n in N t in T\nendaligned","category":"page"},{"location":"market_model/#Storage-Balance","page":"Market Model","title":"Storage Balance","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"S_st^lvl - S_st-1^lvl =\nCHARGE_st cdot eta_s - fracGEN_steta_s + inflow_st\nquad forall  s in S  t in T","category":"page"},{"location":"market_model/#Exchange","page":"Market Model","title":"Exchange","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"The following exchange equation only applies in zonal markets, where electricity transmission within a given zone is neglected and only cross border flows are depicted using a simple approach based on net transfer capacities and an import-export balance. Nodal markets on the other hand already take the physical characteristics of the transmission grid into accound (a describtion of lineflow constraints can be found in section Line Flow Constraints and 3. AC Power Flow Linearization) ","category":"page"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"EX_zt^net = sum_zz^Z EX_zzzt - EX_zzzt\nqquad forall  z in Z t in T","category":"page"},{"location":"market_model/#Variable-Bounds","page":"Market Model","title":"Variable Bounds","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"beginaligned\n0 leq GEN_pt leq avail_pt cdot gen_p^max  forall  p in P  t in T \n0 leq GEN_st leq gen_s^max  forall  s in S  t in T \n0 leq CHARGE_st leq gen_s^max  forall  s in S  t in T \n0 leq S_st^lvl leq cap_s^max  forall  s in S  t in T \n0 leq CU_zt  forall  z in Z  t in T \n0 leq LL_zt  forall  z in Z  t in T \n0 leq EX_zzzt leq ntc_zzz  forall  z in Z  zz in Z t in T\nendaligned","category":"page"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"","category":"page"},{"location":"market_model/#Redispatch-Phase","page":"Market Model","title":"Redispatch Phase","text":"","category":"section"},{"location":"market_model/#Objective-Function-2","page":"Market Model","title":"Objective Function","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"beginaligned\nmin quad  sum_t^Tsum_p^P c^redisp cdot (RAMP_pt^up + RAMP_pt^down)\n+  sum_t^Tsum_p^P c^curt cdot (CU_pt^redisp - cu_pt) \n + sum_t^Tsum_s^S c^redisp cdot (GEN_st^up + GEN_st^down) \n + sum_t^Tsum_s^S c^redisp cdot (CHARGE_st^up + CHARGE_st^down)\nendaligned","category":"page"},{"location":"market_model/#Redispatch-Market-Balance","page":"Market Model","title":"Redispatch Market Balance","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"beginaligned\nsum_p in n^P GEN_pt^redisp +\nsum_s in n^S (GEN_st^redisp - CHARGE_st^redisp)\n+ INJ_nt - CU_nt\n= load_nt - LL_nt qquad forall  n in N t in T\nendaligned","category":"page"},{"location":"market_model/#Line-Flow-Constraints","page":"Market Model","title":"Line Flow Constraints","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"beginaligned\nF_dclt = F_dclt^pos - F_dclt^neg  forall  t in T dcl in DCL \nF_aclt = sum_n^N textB_acl times n^line cdot theta_n  forall  acl in ACL t in T \nINJ_n = sum_m^M textB_n times m^bus cdot theta_m  + sum_dcl^DCL textA_ltimes n^dc cdot F_dclt  forall  n  in N\nendaligned","category":"page"},{"location":"market_model/#Variable-Balances","page":"Market Model","title":"Variable Balances","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"beginaligned\nGEN_pt^redisp = RAMP_pt^up - RAMP_pt^down + gen_pt  forall p in P t in T \nGEN_st^redisp = GEN_st^up - GEN_st^down + gen_st  forall s in S t in T \nCHARGE_st^redisp = CHARGE_st^up - CHARGE_st^down + charge_st  forall s in S t in T\nendaligned","category":"page"},{"location":"market_model/#Storage-Balance-2","page":"Market Model","title":"Storage Balance","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"S_st^lvlredisp = S_st-1^lvlredisp - fracGEN_st^redispeta_s + CHARGE_st^redisp cdot eta_s quad forall s in S t in T","category":"page"},{"location":"market_model/#Variable-Bounds-2","page":"Market Model","title":"Variable Bounds","text":"","category":"section"},{"location":"market_model/","page":"Market Model","title":"Market Model","text":"beginaligned\n0 leq RAMP_pt^up leq avail_pt cdot gen_p^max - gen_pt  forall p in P t in T \n0 leq RAMP_pt^down leq gen_pt  forall p in P t in T \n0 leq GEN_st^up leq gen_s^max - gen_st  forall s in S t in T \n0 leq GEN_st^down leq gen_st  forall s in S t in T \n0 leq CHARGE_st^up leq gen_s^max - charge_st  forall s in S t in T \n0 leq CHARGE_st^down leq charge_st  forall s in S t in T \n0 leq S_st^lvlredisp leq cap_s^max  forall s in S t in T \n0 leq CU_pt^redisp leq avail_pt cdot gen_p^max  forall p in P t in T \n-cap_acl^max leq F_aclt leq cap_acl^max  forall acl in ACL t in T \n-cap_dcl^max leq F_dclt leq cap_dcl^max  forall dcl in DCL t in T \n0 leq F_dclt^pos  forall t in T dcl in DCL \n0 leq F_dclt^neg  forall t in T dcl in DCL \n0 leq theta_nt  forall t in T n in N \n0 = theta_n=slackt  forall t in T \n0 leq GEN_pt^redisp  forall p in P t in T \n0 leq GEN_st^redisp  forall s in S t in T \n0 leq CHARGE_st^redisp  forall s in S t in T \n0 leq LL_nt  forall n in N t in T\nendaligned","category":"page"},{"location":"output_data/#Model-Data","page":"Output Data","title":"Model Data","text":"","category":"section"},{"location":"output_data/#Output-Data-Load","page":"Output Data","title":"Output Data Load","text":"","category":"section"},{"location":"output_data/","page":"Output Data","title":"Output Data","text":"Model outputs are stored in .arrow files. These files are non-human-readable, but are significantly faster to process compared to other formats like CSV or XLXS. To further process model results, they can be read-in by calling the DataFiles constructor","category":"page"},{"location":"output_data/","page":"Output Data","title":"Output Data","text":"DataFiles","category":"page"},{"location":"output_data/#POMATWO.DataFiles","page":"Output Data","title":"POMATWO.DataFiles","text":"DataFiles\n\nA container for loading and storing output data related to a model run. Each field corresponds to a specific dataset represented as a DataFrame. The constructor can be called by providing the directory that contains the results. The path to the specific results of each model run consists of the 'resultdir' and the 'scenarioname' (see section ModelRun).\n\nFields\n\nparams::Parameters: Configuration and model parameters loaded from params.jld2.\nCHARGE::DataFrame: Charging data for storage units.\nEXCHANGE::DataFrame: Cross-border or inter-zonal energy exchange data.\nFEEDIN::DataFrame: Feed-in data from renewable or other sources.\nGEN::DataFrame: Power generation data.\nREDISP::DataFrame: Redispatch actions and adjustments.\nPRS::DataFrame: Price or reserve-related data.\nLINEFLOW::DataFrame: AC line power flow data.\nDCLINEFLOW::DataFrame: DC line power flow data.\nNETINPUT::DataFrame: Net input to zones or nodes.\nNTC::DataFrame: Net Transfer Capacities between zones.\nSTO_LVL::DataFrame: Storage level data.\nSTO_LVL_REDISP::DataFrame: Redispatch-related storage level changes.\nZonalMarketBalance::DataFrame: Market balance data aggregated per zone.\nNodalMarketBalance::DataFrame: Market balance data at the nodal level.\nNodalMarketRedispBalance::DataFrame: Redispatch-adjusted nodal market balance.\n\nConstructor\n\nDataFiles(dir::String)\n\nExample\n\n\nresults_path = joinpath(\"results\", scen_name)\n\n### reading in the result files\nresults = DataFiles(results_path)\n\n\n\n\n\n","category":"type"},{"location":"output_data/","page":"Output Data","title":"Output Data","text":"The following functions can be used to create some useful tables automatically.","category":"page"},{"location":"output_data/","page":"Output Data","title":"Output Data","text":"transform_results_by_type","category":"page"},{"location":"output_data/#POMATWO.transform_results_by_type","page":"Output Data","title":"POMATWO.transform_results_by_type","text":"transform_results_by_type(results, kind, zone)\n\nAggregates generation results by plant type and time for a specified market kind and zone.\n\nArguments\n\nresults: DataFiles object containing generation data and parameters.\nkind: Symbol or string specifying the market result to extract (:REDISP, :GEN, or :DA).\nzone: The name or key of the market zone to filter on.\n\nReturns\n\nA DataFrame with time as rows and columns for each plant type, containing the sum of generation for each time step and plant type in the specified zone.\n\nNotes\n\nFor kind = :REDISP, uses the GEN_REDISP field.\nFor kind = :GEN or :DA, uses the GEN field (:GEN and :DA are treated identically).\nIf an unsupported kind is given, a warning is issued and nothing is returned.\n\nExample\n\njulia> transform_results_by_type(results, :DA, \"DE\")\n4×3 DataFrame\n Row │ Time   wind      coal     \n     │ Int64  Float64?  Float64?\n─────┼───────────────────────────\n   1 │     1      60.0       0.0\n   2 │     2     100.0       0.0\n   3 │     3     120.0       0.0\n   4 │     4     140.0      40.0\n\n\n\n\n\n","category":"function"},{"location":"output_data/","page":"Output Data","title":"Output Data","text":"summarize_result","category":"page"},{"location":"output_data/#POMATWO.summarize_result","page":"Output Data","title":"POMATWO.summarize_result","text":"summarize_result(result_table)\n\nSummarizes a generation results table by summing each column (plant type) over all time steps.\n\nArguments\n\nresult_table: DataFrame produced by transform_results_by_type.\n\nReturns\n\nA DataFrame with a single row, where each column contains the total sum of generation (over all time steps) for the corresponding plant type.\n\nExample\n\njulia> summarize_result(transform_results_by_type(results, :DA, \"DE\"))\n1×2 DataFrame\n Row │ wind     coal    \n     │ Float64  Float64\n─────┼──────────────────\n   1 │   420.0     40.0\n\n\n\n\n\n","category":"function"},{"location":"input_data/#Model-Data","page":"Input Data","title":"Model Data","text":"","category":"section"},{"location":"input_data/#Input-Data-Load","page":"Input Data","title":"Input Data Load","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"load_data(data::Dict)","category":"page"},{"location":"input_data/#POMATWO.load_data-Tuple{Dict}","page":"Input Data","title":"POMATWO.load_data","text":"load_data(data::Dict{Symbol, String})\n\nReads a collection of model input files specified by a dictionary and returns a fully populated Parameters struct for use in the market simulation.\n\nArguments\n\ndata::Dict{Symbol, String}: A dictionary mapping required and optional parameter names to file paths.\n\nRequired keys\n\nThe following keys must be included in data:\n\n:plants - Plant specification file.\n:nodes - Node topology file.\n:zones - Zone definition file.\n:demand - Nodal or zonal demand input.\n:types - Technology or plant type definitions.\n\nOptional keys\n\nThese keys can optionally be included to enable extended model functionality:\n\nNetwork:\n:lines - AC transmission line definitions.\n:dclines - DC line definitions (requires :lines to be included).\nAvailability and plant characteristics:\n:avail -  Plant availability.\n:avail_planttype_nodal - Availability by plant type and node.\n:avail_planttype_zonal - Availability by plant type and zone.\n:min_generation - Minimum generation constraints.\nMarket and operation:\n:ntc - Net Transfer Capacities between zones.\n:fixed_exchange - Fixed exchange schedules.\n:prs_demand - Prosumer demand profiles.\n:fuel_prices - Time-dependent fuel prices.\n:inflow - Storage inflow data (e.g. hydro).\n:historical_generation - Historical generation for calibration.\n\nnote: Note\nSome advanced model features (e.g. redispatch or zonal availability mapping) depend on optional keys. Omitting them may disable those capabilities.\n\nExample\n\ndata = Dict(\n    :plants => joinpath(datapath, \"plants.csv\"),\n    :nodes => joinpath(datapath, \"nodes.csv\"),\n    :zones => joinpath(datapath, \"zones.csv\"),\n    :lines => joinpath(datapath, \"lines.csv\"),\n    :dclines => joinpath(datapath, \"dclines.csv\"),\n    :demand => joinpath(datapath, \"nodal_load.csv\"),\n    :types => joinpath(datapath, \"planttypes.csv\"),\n)\n\nparams = load_data(data)\n\n\n\n\n\n","category":"method"},{"location":"input_data/#Model-Input-Data-Structure","page":"Input Data","title":"Model Input Data Structure","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"The data that is read in using the load_data function has to be provided via seperate csv files. In the following section, the structure of those files is described. Generally the column headers have to be identical to what is described as Column in the tables below. Table rows are created to add a data entry and should follow thy type convention also specified below.","category":"page"},{"location":"input_data/#Data-Structure:-plants.csv","page":"Input Data","title":"Data Structure: plants.csv","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Describes information about power plants and their attributes. Each row represents a different plant with the following columns:","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Column Type Description\nindex String Unique identifier for the plant.\nplant_type String Type of power plant (e.g., wind, coal, etc.).\nnode String Identifier for the network node to which the plant is connected.\ng_max Integer Maximum generation capacity of the plant (in MW).\neta Integer Efficiency factor or binary flag for participation (typically 0 or 1).\nstorage_capacity Integer Maximum storage capacity (in MWh), 0 if not applicable.\nlat Float Latitude of the plant's location.\nlon Float Longitude of the plant's location.\nstorage_power Float Power limit of the storage system (in MW), may be NaN if not applicable.","category":"page"},{"location":"input_data/#Notes","page":"Input Data","title":"Notes","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Plants without storage systems have storage_capacity = 0 and storage_power = NaN.\nThe eta column may represent conversion efficiency or a binary indicator, depending on the modeling context.","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"","category":"page"},{"location":"input_data/#Data-Structure:-planttypes.csv","page":"Input Data","title":"Data Structure: planttypes.csv","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Describes properties of each plant type used in the system.","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Column Type Description\nindex String Name of the plant type (e.g., coal, wind).\ndispatchable Integer Indicates if the plant type is dispatchable (1) or not (0).\nstorage Integer Indicates if the plant type has storage capability (1) or not (0).\nfuel_price Integer Fuel cost (arbitrary units or €/MWh).\nco2content Integer CO₂ emissions per unit of energy.\nprosumer Integer Indicates if the plant type supports prosumer behavior (1) or not (0).\ncolor String Hex color code used for visualization.","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"","category":"page"},{"location":"input_data/#Data-Structure:-zones.csv","page":"Input Data","title":"Data Structure: zones.csv","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Specifies the geographic or administrative zones involved in the model.","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Column Type Description\nindex String Identifier for the zone (e.g., DE).","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"","category":"page"},{"location":"input_data/#Data-Structure:-nodes.csv","page":"Input Data","title":"Data Structure: nodes.csv","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Defines all nodes in the network along with their geographic and zone information.","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Column Type Description\nindex String Node identifier.\nzone String Zone the node belongs to.\nname String Human-readable node name.\nlat Float Latitude coordinate.\nlon Float Longitude coordinate.\nslack Integer Indicator for slack bus (1 if slack, otherwise 0).","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"","category":"page"},{"location":"input_data/#Data-Structure:-nodal_load.csv","page":"Input Data","title":"Data Structure: nodal_load.csv","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Contains the time series of load demand at each node.","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Column Type Description\nn1 Integer Load demand in MW at node n1 for each time step. (Example shown; actual structure may include multiple nodes.)\nn2 Integer Load demand in MW at node n2 for each time step. (Example shown; actual structure may include multiple nodes.)\n... Integer Load demand in MW at node nx for each time step. (Example shown; actual structure may include multiple nodes.)","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"","category":"page"},{"location":"input_data/#Data-Structure:-lines.csv","page":"Input Data","title":"Data Structure: lines.csv","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Describes the properties of AC transmission lines between nodes.","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Column Type Description\nNE_name String Line name.\nnode_i String From-node ID.\nnode_j String To-node ID.\nvoltage Integer Nominal voltage level (kV).\nr Float Line resistance (Ohms).\nx Float Line reactance (Ohms).\nb Integer Line susceptance (unitless).\nI_nom Integer Nominal current rating.\ncapacity Integer Transmission capacity (MW).\nindex String Line identifier (typically same as NE_name).\nlat_i Float Latitude of from-node.\nlon_i Float Longitude of from-node.\nlat_j Float Latitude of to-node.\nlon_j Float Longitude of to-node.\nnode_i_name String Name of from-node.\nnode_j_name String Name of to-node.","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"","category":"page"},{"location":"input_data/#Data-Structure-dclines.csv","page":"Input Data","title":"Data Structure dclines.csv","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Placeholder table for DC transmission lines. Currently contains no entries.","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Column Type Description\nindex String Line identifier.\nnode_i String From-node ID.\nnode_j String To-node ID.\nlat_i String Latitude of from-node.\nlon_i String Longitude of from-node.\nlat_j String Latitude of to-node.\nlon_j String Longitude of to-node.\ncapacity String Capacity of the DC line.","category":"page"},{"location":"input_data/#Parameters","page":"Input Data","title":"Parameters","text":"","category":"section"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"Based on the given input data, a Parameters struct is created.","category":"page"},{"location":"input_data/","page":"Input Data","title":"Input Data","text":"POMATWO.Parameters","category":"page"},{"location":"input_data/#POMATWO.Parameters","page":"Input Data","title":"POMATWO.Parameters","text":"Parameters\n\nA central container that holds all data required for running the POMATWO electricity market model.   This struct is typically created by the load_data function and passed into the simulation via ModelRun.\n\nIt includes detailed parameter mappings for power plants, grid infrastructure, demand, prosumers, and internal mappings used for optimization and visualization.\n\nOverview of Field Groups\n\nSets:\nsets::Sets: Holds index sets for nodes, plants, time steps, etc.\nPower Plant Parameters:\nMaximum capacities (gmax, gmax_storage), efficiencies (eta), marginal costs (mc), availabilities (avail, avail_planttype_nodal, ...), and plant-to-type mappings.\nPlant Type Metadata:\nVectors of plant types (e.g., dispatchable, storage_types) and color mappings (plant_type2color).\nNode and Grid Parameters:\nNode-to-zone mappings, node coordinates, AC/DC line parameters (reactance, acline_capacity, etc.).\nDemand and Exchange:\nNodal/zonal load (nodal_load, zonal_load), inflow data, fixed exchanges, and optional prosumer-modified demand.\nZonal Parameters:\nNet Transfer Capacities (ntc) and import/export mappings.\nProsumer and Storage Data:\nStorage state, inflows, and derived demand profiles.\nInternal Mappers:\nMappings like plants_in_zone, plant2node, nodes_in_zone to simplify model formulation.\nPlotting:\nColor assignments used for plotting technologies or regions (colors).\n\nNotes\n\nThis struct is designed to support keyword-based construction, but in practice it is rarely created manually. Use load_data to construct a complete and consistent Parameters instance from input files.\n\n\n\n\n\n","category":"type"},{"location":"#POMATWO.jl","page":"Home","title":"POMATWO.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"POMATWO is an electricity market model designed to determine the cost-optimal electricity supply on an hourly basis. It incorporates market clearing conditions, grid topology, and network constraints. It supports solving predefined market stages such as the day-ahead market and redispatch.","category":"page"},{"location":"#Inputs","page":"Home","title":"Inputs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To run POMATWO, the following input data is required:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Definition of market zones, time steps, nodes, generation technologies (including solar and wind), storages, and transmission lines\nPower plant characteristics (availability, capacity, marginal production cost etc.)\nGrid configuration (topology and line capacities)\nStorage data (inflows, capacities, efficiencies)\nMarginal costs of generation technologies\nElectricity load data","category":"page"},{"location":"#Outputs","page":"Home","title":"Outputs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"POMATWO calculates the cost-optimal dispatch. Main outputs include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Generation per power plant and time step (MWh)\nRedispatch decisions (MWh)\nNode-level injections (MWh)\nElectricity Prices","category":"page"},{"location":"","page":"Home","title":"Home","text":"These results are available per market stage (e.g., day-ahead, intraday gates).","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Pkg Pkg.add(url=\"https://github.com/EnnoWbrw/POMATWO\")","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's a minimal working example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using POMATWO\nusing HiGHS\ndatapath = joinpath(\"examples\", \"test_data_3_nodes\")\n\n# define dictionary with all necessary data sets\ndataCS = Dict{Symbol,String}(\n    :plants => joinpath(datapath, \"plants.csv\"),\n    :nodes => joinpath(datapath, \"nodes.csv\"),\n    :zones => joinpath(datapath, \"zones.csv\"),\n    :lines => joinpath(datapath, \"lines.csv\"),\n    :dclines => joinpath(datapath, \"dclines.csv\"),\n    :demand => joinpath(datapath, \"nodal_load.csv\"),\n    :types => joinpath(datapath, \"planttypes.csv\"),\n)\n\n# load input data\nparams = load_data(dataCS)\n\n\n\n# set scenario name \nscen_name = \"3_nodes\"\n\n# define output path for data transfer\noutput_path = \"results/\"\n\n### Defining a test setup for a model run that stops after 4 timesteps\nsetup = ModelSetup(\n    \"TestSetup\",\n    TimeHorizon(stop = 4),\n    ZonalMarketWithRedispatch(target_zone = \"DE\"),\n    NoProsumer(),\n)\n\nsolver = HiGHS.Optimizer\n\nmr = ModelRun(params, setup, solver; scenarioname = scen_name, overwrite = true)\n\nPOMATWO.run(mr)\n\nresults_path = joinpath(output_path, scen_name)\n\n### reading in the result files\nresults = DataFiles(results_path)\n\n### Looking at specific results\nresults.GEN\nresults.LINEFLOW\n\n### creating a graph to visualize day ahead generation levels over time\nplot_DA_w_Redisp_interactive(results)\n\n### create barplot to summarize generation by technology in the observed time horizon\nplot_total_gen(results, :DA)","category":"page"}]
}
